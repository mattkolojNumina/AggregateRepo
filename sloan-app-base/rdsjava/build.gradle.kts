/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/numina-group/rds")

    }
    maven {
        name = "Public online Restlet repository"
        url = uri("https://maven.restlet.talend.com")
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("org.json:json:20231013")
    implementation("com.google.guava:guava:32.1.1-jre")
    implementation("com.google.code.gson:gson:2.10.1")

    implementation("com.rabbitmq:amqp-client:5.20.0")

    implementation("com.numinagroup:rdsjava:1.2.15")

    implementation("org.restlet.jse:org.restlet:2.4.0")
    implementation("org.restlet.jse:org.restlet.ext.json:2.4.0")

    implementation("com.mysql:mysql-connector-j:8.2.0")
    implementation("com.zaxxer:HikariCP:5.1.0")

    implementation("ch.qos.logback:logback-classic:1.4.12")
    implementation("commons-net:commons-net:3.9.0")
    implementation("commons-io:commons-io:2.13.0")
}



// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("rds.app.base.App")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task("FileDownload", JavaExec::class) {
    mainClass = "host.FileDownload"
    classpath = sourceSets["main"].runtimeClasspath
}

task("FileUpload", JavaExec::class) {
    mainClass = "host.FileUpload"
    classpath = sourceSets["main"].runtimeClasspath
}

task("GeekProcess", JavaExec::class) {
    mainClass = "host.geek.GeekProcess"
    classpath = sourceSets["main"].runtimeClasspath
}

task("CustSkuGeekTranslator", JavaExec::class) {
    mainClass = "host.geek.CustSkuGeekTranslator"
    classpath = sourceSets["main"].runtimeClasspath
}

task("ws-test", JavaExec::class) {
    mainClass = "term.TerminalDriver"
    classpath = sourceSets["main"].runtimeClasspath
    args = listOf("ws-george")
}

task("sw-dev1", JavaExec::class) {
    mainClass = "term.TerminalDriver"
    classpath = sourceSets["main"].runtimeClasspath
    args = listOf("sw-dev1")
}

task("FTP", JavaExec::class) {
    mainClass = "host.ContinuousFTPUploader"
    classpath = sourceSets["main"].runtimeClasspath
}

task("packlist", JavaExec::class) {
    mainClass = "packlist.PclPacklistApp"
    classpath = sourceSets["main"].runtimeClasspath
}

task("victory", JavaExec::class) {
    mainClass = "victory.Victory"
    classpath = sourceSets["main"].runtimeClasspath
}

task("orderPrep", JavaExec::class) {
   mainClass = "orchestration.OrderPrepApp"
   classpath = sourceSets["main"].runtimeClasspath
}

task("cartonize", JavaExec::class) {
   mainClass = "cartonize.CartonizeApp"
   classpath = sourceSets["main"].runtimeClasspath
}

task("cartBuild", JavaExec::class) {
   mainClass = "orchestration.ContainerBuildApp"
   classpath = sourceSets["main"].runtimeClasspath
}

task("status", JavaExec::class) {
   mainClass = "orchestration.StatusApp"
   classpath = sourceSets["main"].runtimeClasspath
}

//tasks.register<Copy>("copyJars") {
//    dependsOn("installDist")
//    from("$buildDir/install/${project.name}")
//    include("**/*.jar")
//    into("/home/rds/app/lib")
//}
